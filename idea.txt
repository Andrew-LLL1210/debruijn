\ 1 \ 1 2 \ 3 (2 1)

convert to

a [\ 1 \ 1 2 \ 3 x]
x [2 1]


substitution: (\ \ \ 3 3 3) \ \ 2

a [x \ \ 2]
x [\ \ \ 3 3 3]

l [\ \ r r r] copy root[0][1..], substitute free variables with `r`
r [\ \ 2] copy root[1..]


examples

\x. x \y. y x
\   1 \   1 2
[\ 1 \ 1 2]

\xy. (\x.y x p) (\z.z x)
 \\  ( \ 2 1 p)   \ 1 3
[\ \ g \ 1 3] g [\ 2 1 p] p [???]

(\p.p z) \q.w \w.w q z p
( \ 1 z)  \ w  \ 1 2 z p
[g \ w \ 1 2 z p] g [\ 1 z] w z p
  substitute tail into g
[x  z] x [\ w \ 1 2 z p] w z p
  substitute tail into x
[w \ 1 z z p] w z p
  stop simplifying bc no more known symbols

\p.p q \p. q p
 \ 1 q  \  q 1
[\ 1 q \ q 1]

\s.s z \q. s q
 \ 1 z  \  2 1
[\ 1 z \ 2 1]

(\s. s z) \q. w \w. w q z s
( \  1 z)  \  w  \  1 2 z s
[g \ w \ 1 2 z s] g [\ 1 z]
  substitute tail into head
[x z] x [\ w \ 1 2 z s]
  substitute tail into head
[w \ 1 z z s]

(\s.s)(\q.qs)
 \  1) \ 1 s
[g \ 1 s] g [\ 1]
  substitute tail into head
[x] x [\ 1 s]
  dereference
[\ 1 s]

\z.((\s.s q)\q.q z)\z.z z
 \ (( \ 1 q) \ 1 2) \ 1 1
[\ g \ 1 1] g [h \ 1 2] h [\ 1 q]
  g: substutute tail into head
[\ g \ 1 1] g [x q] x [\ 1 2]
  g: substitue tail into head
[\ g \ 1 1] g [q 1]
  rerender
\z. (q z) \x. x x
  confirm
\z.((\s.s q)\q.q z)\z.z z
\z.((\s.s a)\q.q z)\x.x x
\z.((\q.q z) a)\x.x x
\z. (a z) \x. x x
\z. (q z) \x. x x ok

(\z.z) (\q.q q) (\s.s a)
( \ 1) ( \ 1 1) \ 1 a
[g h \ 1 a] g [\ 1] h [\ 1 1]
  STIH identity
[h \ 1 a] h [\ 1 1]
  STIH
[x x] x [\ 1 a]
  DEREF
[x \ 1 a] x [\ 1 a]
  STIH
[y a] y [\ 1 a]
  STIH single
[a a]

perturbation
[g h \ 1 a] g [\ 1 1] h [\ 1]
  DISSOCIATE
[x \ 1 a] x [g h] g [\ 1 1] h [\1]
  x STIH single
[x \ 1 a] x [h h] h [\1]
  x STIH identity
[x \ 1 a] x [h] h [\ 1]
  x DEREF
[x \ 1 a] x [\ 1]
  STIH identity
[\ 1 a]

rules:
DEREF:
  if expression k is a single group symbol, rewrite k as the contents of k[0]
DEREF indirect:
  if deref(k[0]).len == 1, rewrite k[0] = deref(k[0])[0]
STIH:
  if g = deref(k[0]), g[0] == lambda and k[1] == lambda
    rewrite k as g, substituting new variable x for the top lambda of g
	write x as k[1..], the tail of k
STIH single:
  if g = deref(k[0]), g[0] == lambda and k.len == 2
    rewrite k as g, substituting k[1] for the top lambda of g
	(this is a shortcut to eliminate the need for a DEREF)
STIH identity:
  if deref(k[0]) == [\ 1]
    rewrite k as k[1..]
DISSOCIATE:
  if g = deref(k[0]), g[0] == lambda and STIH does not apply
    rewrite k as [A] + k[2..] with new variable A
	write A as k[0..2]
	(this allows the next reduction to be a STIH single on A)
Try to apply rules on the head expression.
Try to apply rules on subexpressions after the lambda symbol.
If that fails, move down the expression list and try again.
If there is no simplifiable expression, consider the head expression simple.
If a subexpression is simplified, start over at the head expression.

[g g g g] g [\ a 1]
  DISSOC
[A g g] A [g g] g [\ a 1]
  A STIH single
[A g g] A [a g] g [\ a 1]
  simple.

RENDERING

first-last traversal
in order traversal parameterized by two bools (first and last)
root is first and last

fn traverse (k, first? last?)
  parenthesized =
    (k[0] == .lambda and !last) or
	(k[0] != .lambda and !first {and k.len > 1 should be asserted})
  if parenthesized: print '('
  defer if parenthesized: print ')'
  for (k, 0..) |sym, ix..| {
    if (ix != 0) print ' '
    switch (sym) {
	  .lambda => print '\',
	  .index => |n| print n
	  .symbol => |id| if (deref(id)) |subexpr|
	    traverse(subexpr,
	      (first or parenthesized) and ix == 0)
		  (last or parenthesized) and ix == k.len - 1))
	    else print sym.id
    }
  }

[A g g] A [a g] g [\ a 1]

traverse(root, first, last)
  p = false
  traverse(A, first)
    p = false
	print a                          a
	traverse(g)                      (\ a 1)
	  p = true
	  print \
	  print a
	  print 1
  traverse(g)                        (\ a 1)
    p = true
	print \, a, 1
  traverse(g, last)                  \ a 1
    p = false
	print \, a, 1

a (\ a 1) (\ a 1) \ a 1

NONCONVERGING EXPRESSIONS

Y = \f. (\x. f (x x)) \x. f(x x)
     \   (\  2 (1 1))  \  2 (1 1)
Y [\ g \ 2 x] g [\ 2 x] x [1 1]

lets demonstrate that Y f is a fixed point of f (wait, what?)
[Y f] Y [\ g \ 2 a] g [\ 2 b] a [1 1] b [1 1]
  STIH single
[g \ f a] g [\ f b] a [1 1] b [1 1]
  STIH
[f b] b [s s] s [\ f a] a [1 1]
  b STIH
[f b] b [f c] c [s s] s [\ f a] a [1 1]



